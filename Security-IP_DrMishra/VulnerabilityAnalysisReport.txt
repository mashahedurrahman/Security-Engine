For vulnerability analysis, we run the provided tools on the design and modify based on the results.

We are currently taking the following into consideration when designing IP:

1. FSM Vulnerability:

To fully protect against DCS (Don't Care State) vulnerability, we should explicitly define all possible encodable states given a state vector (for example, if the state vector has 3 bits, we define 8 states). We add functionality to all defined states
so that they are not removed during synthesis. This involves splitting functionality from other states to fill a state, absorbing the functionality of a state into another state, or introducing new functionality
to the design (potentially extra security mitigation or optional additions to IP).

To protect against DCT (Don't Care Transition) vulnerability, we should explicitly add extra transitions into the designs (this may not be feasible in all cases since we do not want all transitions to exist). We may add extra signals to cause these transitions and block certain
functionality when the signal is activated (so that an attacker cannot exploit the defined transition instead of don't care logic).

We reencode states to prevent LFI (Laser Fault Injection)-based attacks. This involves reencoding the states such that protected states cannot be "jumped into" by flipping state bits with a laser. This mitigation requires the user
to identify protected states and the expected laser capability of the attacker (which determines how many bits can be flipped).

2. Malicious Implants:

We note the number of rare nodes (signals which rarely have a certain value) in the design. If the number of rare nodes is unacceptably high, we modify the design to reduce the number of rare nodes.
This reduction is likely to reduce the number of test vectors needed to detect Trojans in the post-silicon stage (assuming that the changes do not create more nodes which cannot be activated at the same time).

3. Information Leakage

We do not fully or partially connect any secret value (in this case, usually private keys) to any output or intermediate signal connected to an output. We cannot fully protect from information leakage
because the private key often drives the functionality of the module (for example, the Montgomery ladder generates a public key using a private key as well as curve parameters).

4. Data Flow Vulnerability

The tool analyzes the data flow vulnerability. We do not yet have access to this tool.

5. Clock/Reset Network Vulnerability

The tool analyzes both clock and reset network vulnerability to malicious attacks. We do not yet have access to this tool.

General Note: All design decisions regarding these mitigation techniques involve the designer considering certain tradeoffs (both in terms of different PASS parameters and different types of vulnerability).